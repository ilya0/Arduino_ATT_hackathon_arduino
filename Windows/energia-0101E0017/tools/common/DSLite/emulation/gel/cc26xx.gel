/* \file        cc26xx.gel
 * \brief       GEL script for CC13xx/CC26xx device family.
 *
 * \revision    $Revision: 37354 $
 */
#define ENGR_PC_HIB_NEXT_CC26XX     0x10003f54
#define ENGR_PC_HIB_FIRST_CC26XX    0x10003f58
#define ENGR_PC_HIB_NEXT_CC13XX     0x10003ff4
#define ENGR_PC_HIB_FIRST_CC13XX    0x10003ff8

#define ENGR_PC_END_CC26XX          0x10003a9a
#define ENGR_PC_END_CC13XX          0x10003b2a
#define FLASH_FWLOCK                0x4003003c
#define FLASH_FWFLAG                0x40030040
#define AON_SYSCTL                  0x4009000C
#define WDT_LOCK                    0x40080C00
#define WDT_CTL                     0x40080008

int _BoardResetMenuDefined = 0;
int _isEngrDevice = -1;

StartUp(int major, int minor, int patch)
{
    /* Load the GEL files */
    GEL_LoadGel("$(GEL_file_dir)/connect_util.gel");

    DefineResets(0);

    // Initialize memory map
    memorymap_init();

    // Issue Board Reset to ensure device is in a known state
    // Note: If you want to attach to a running target without resetting the
    //       device, you must comment out the following 4 lines:
    if(!GEL_IsConnected())
    {
        GEL_AdvancedReset("Board Reset");
    }
}

OnTargetConnect()
{
    // Complete device trimming if engineering device
    CompleteTrimOnEngrDevice();
    
    DefineResets(1);
}

OnPreFileLoaded(int nErrorCode, int bSymbolsOnly)
{
    if(!bSymbolsOnly)
    {
        // Make sure device is in a known state before loading program.
        BoardReset_Automatic();

        ForceFlashTrimBeforeEraseAndProgram();
    }
}

OnFileLoaded(int nErrorCode, int bSymbolsOnly)
{
    if(!bSymbolsOnly)
    {
        // Restart if "Run to label on restart" is enabled
        if ( DEBUG_GetBoolProperty("AutoRunToLabelOnRestart") )
        {
          GEL_Restart();
        }
    }
}

menuitem "CC26xx"
/**
 * \brief    This function issues a board reset before erasing the device flash.
 *           This function disconnects from target after completion.
 *           NOTE: If CM3 DAP is locked, make sure to disable "Custom configuration"
 *                 from all sub paths in the device's target connection file (.ccxml).
 */
hotmenu MassErase()
{
    GEL_TextOut("Initializing.\n", "MassErase()");

    // Disconnect from target
    DisconnectIfConnected(); // Cortex
    GEL_EvalOnTarget("<parent>", "DisconnectIfConnected()", 1); // DAP
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"DisconnectIfConnected()\", 1)", 1);

    // Do board reset
    GEL_TextOut("Issuing Board Reset.\n", "MassErase()");
    GEL_AdvancedReset("Board Reset");

    // Reconnect to Icepick
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"ConnectIfDisconnected()\", 1)", 1);
    
    // On engineering devices only: Disable halt-in-boot before (AON_SYSCTL:DBG.NO_HALT_IN_BOOT = 1)
    // *((int*)(AON_SYSCTL)) = 0x100;
    
    // Issue mass erase and disconnect
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"IP_CC26xx_CHIPERASE = 1\", 1)", 1);
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"DisconnectIfConnected()\", 1)", 1);

    GEL_TextOut("Mass erase complete.\n", "MassErase()");
}

/**
 * \brief    This function issues a board reset and restores the connection
 *           state.
 */
BoardReset_Automatic()
{
    // Store current state
    ConnectStateStore();
    GEL_EvalOnTarget("<parent>", "ConnectStateStore()", 1);
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"ConnectStateStore()\", 1)", 1);

    // Disconnect
    DisconnectIfConnected(); // Cortex
    GEL_EvalOnTarget("<parent>", "DisconnectIfConnected()", 1); // DAP
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"DisconnectIfConnected()\", 1)", 1);

    // Issue board reset
    GEL_AdvancedReset("Board Reset");

    // Restore current state
    ConnectStateRestore();
    GEL_EvalOnTarget("<parent>", "ConnectStateRestore()", 1);
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"ConnectStateRestore()\", 1)", 0);

    if(GEL_IsConnected())
    {
        CompleteTrimOnEngrDevice();
        
        // Re-activate breakpoints
        GEL_RestoreDebugState();
        
        // Update GUI (Debug view not always updated)
        GEL_RefreshWindows();
    }

    GEL_TextOut("Board Reset Complete.\n");
}

/**
 * \brief    Engineering devices don't have trimmed flash after halt-in-boot. 
 *           This function runs to end of boot flash to ensure flash is
 *           trimmed. This function assumes emulator is connected to target.
 */
CompleteTrimOnEngrDevice()
{
    int pcReg = PC;
    if(pcReg == ENGR_PC_HIB_NEXT_CC26XX || pcReg == ENGR_PC_HIB_FIRST_CC26XX)
    {
        // Engineering device has halted in boot. Run to end of ROM to 
        // ensure device flash is trimmed.
        GEL_Go(ENGR_PC_END_CC26XX);
    }
    else if (pcReg == ENGR_PC_HIB_NEXT_CC13XX || pcReg == ENGR_PC_HIB_FIRST_CC13XX)
    {
    	GEL_Go(ENGR_PC_END_CC13XX);
    }
}

DefineResets(int neverAgain)
{
    if(!_BoardResetMenuDefined)
    {
    	// Remove all resets except CPU, System and board reset
    	DEBUG_RemoveResets(3);
    	
        // Define reset type
        DEBUG_DefineReset("Board Reset (automatic)", "The same as a board reset, but automatically disconnects before and re-connects after", 0 /* 1 requires halt - 0 for allowing while running */, "BoardReset_Automatic()" );
        
        // Re-define Emulator Reset
        DEBUG_DefineReset("Reset Emulator", "", 8 /* All targets for the specific emulator connection must be halted*/, "EmulatorReset()");
    }

    if(neverAgain) {
        _BoardResetMenuDefined = 1;
    }
}

/** \brief Function issues "Emulator Reset" */
EmulatorReset()
{
    GEL_EvalOnTarget("<parent>","GEL_AdvancedReset(\"Reset Emulator\")", 1);
}

/** \brief  Make sure flash is trimmed for erase/program
*/
ForceFlashTrimBeforeEraseAndProgram()
{
    int fwFlag;

    *((int*)FLASH_FWLOCK) = 0x00000005;
    
    // FLASH.FWFLAG[0] = 0
    fwFlag = (*((int*)FLASH_FWFLAG)) & 0xFFFFFFFE;
    *((int*)FLASH_FWFLAG) = fwFlag;

    *((int*)FLASH_FWLOCK) = 0x00000000;
}

memorymap_init()
{
    GEL_MapOff();
    GEL_MapReset();
    GEL_MapOn();

    /*
     * Syntax for GEL_MapAddStr.
     * GEL_MapAddStr(address, page, length, "attribute", waitstate);

    Basic Attribute Types           Derived Attribute Types
    String      Description         String      Description
    R           Read                NONE        No memory/protected
    W           Write               RAM         Read and write
    P           Port                ROM         Read only
    EX          External            WOM         Write only
    EM          Emulator            INPORT      Port read only
    PR          Programmable        OUTPORT     Port write only
    ER          Erasable            IOPORT      Port read and write
    DA          Dual access         SARAM       Single access RAM
    ASn         Access size         DARAM       Dual access RAM
    SHnC        Shared              FLASH       Flash ROM
    CACHE       Cache               EXRAM       External RAM
    TX          Text                EXROM       External ROM
    MN          Monitor             EPROM       Erasable write-able EPROM
    SA          Single access       MONITOR     Monitor ROM
    FL          Flash               PRAM        Program RAM
    MR          Memory mapped       PROM        Program ROM
    NULL        NULL                NULL        NULL
    */
    GEL_MapAddStr(0x00000000, 0, 0x00020000, "R", 0);       /* Flash */
    GEL_MapAddStr(0x10000000, 0, 0x00020000, "R", 0);       /* ROM */
    GEL_MapAddStr(0x11000000, 0, 0x00002000, "R|W", 0);     /* GPRAM */
    GEL_MapAddStr(0x20000000, 0, 0x00005000, "R|W", 0);     /* SRAM */
    GEL_MapAddStr(0x21000000, 0, 0x00001000, "R|W", 0);     /* RFC_SRAM */
    GEL_MapAddStr(0x40000000, 0, 0x000E1028, "R|W", 0);     /* Peripherals */
    GEL_MapAddStr(0x40031000, 0, 0x00001000, "NONE", 0);    /* Protected */
    GEL_MapAddStr(0x50001000, 0, 0x00000400, "R", 0);       /* FCFG1 */
    GEL_MapAddStr(0x50002000, 0, 0x00000400, "R", 0);       /* FCFG2 */
    GEL_MapAddStr(0x50003000, 0, 0x00001000, "R", 0);       /* CCFG */
    GEL_MapAddStr(0xE0000000, 0, 0x00003000, "R|W", 0);     /* CPU_ITM, CPU_DWT, CPU_FPB */
    GEL_MapAddStr(0xE000E000, 0, 0x00001000, "R|W", 0);     /* CPU_SCS */
    GEL_MapAddStr(0xE0040000, 0, 0x00001000, "R|W", 0);     /* CPU_TPIU */
    GEL_MapAddStr(0xE00FE000, 0, 0x00001000, "R|W", 0);     /* CPU_TIPROP */

    GEL_TextOut("Memory Map Initialization Complete.\n");
}
